Solution - 1
#include<bits/stdc++.h>
int partition(vector<int> arr, int low, int high) {
	// Write your code here
	int pivot = arr[low];
	int i = low;
	int j = high;
	while(i<j){
		while(arr[i]<=pivot && i<=high-1){
			i++;
		}
		while(arr[j]>pivot && j >= low+1){
			j--;
		}
		if(i<j) swap(arr[i], arr[j]);

	}
	swap(arr[low], arr[j]);
	return j;
}

void qs(vector<int> arr, int low, int high) {
	if(low<high){
		int pIndex = partition(arr, low, high);
		qs(arr, low, pIndex-1);
		qs(arr, pIndex+1, high);
	}	
}

vector<int> quickSort( vector<int> arr){
	qs(arr, 0 , arr.size()-1);
	return arr;
}
___________________________________________

Solution - 2
  int partitionArray(int input[], int start, int end) {

     int pivot = input[start];

     int i = start;

     int j = end;

     while(i<j)

     {

         while(input[i]<=pivot && i<=end-1) i++;

         while(input[j]>pivot && j>=start+1) j--;

         if(i<j) swap(input[i],input[j]);

     } swap(input[start],input[j]);

  return j;

}

 

void quickSort(int input[], int start, int end) 

{

    if(start<end)

    {

        int index = partitionArray(input, start,  end);

        quickSort(input,start, index -1);

        quickSort(input, index +1,end);

    }

}
