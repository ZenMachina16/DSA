Sol-1
#include <vector>
using namespace std;
void swap(int &a, int &b){
    int temp = a;
    a = b;
    b = temp;
}
// for vectors
void merge(vector<int>&arr, int low, int mid, int high){
    vector<int> arr1;
    int l = low;
    int r = mid+1;
    while(l<=mid && r<=high){
        if(arr[l]<=arr[r]){
            arr1.push_back(arr[l]);
            l++;
        }
        else{
            arr1.push_back(arr[r]);
            r++;
        }
    }
    while(l<=mid){
        arr1.push_back(arr[l]);
        l++;
    }
    while(r<=high){
        arr1.push_back(arr[r]);
        r++;
    }
    for(int i=low; i<=high; i++){
        // cout<<arr1[i-low]<<" ";
        arr[i] = arr1[i-low];
    }
    cout<<endl;
}
void mergeSort(vector<int>&arr, int low, int high) {
    // Write Your Code Here
    if(low==high) return;
    int mid = (low+high)/2;
    mergeSort(arr, low, mid);
    mergeSort(arr, mid+1, high);
    merge(arr,low,mid,high);
}

// for arrays
void merge(int arr[], int low, int mid, int high){
    vector<int> arr1;
    int l = low;
    int r = mid+1;
    while(l<=mid && r<=high){
        if(arr[l]<=arr[r]){
            arr1.push_back(arr[l]);
            l++;
        }
        else{
            arr1.push_back(arr[r]);
            r++;
        }
    }
    while(l<=mid){
        arr1.push_back(arr[l]);
        l++;
    }
    while(r<=high){
        arr1.push_back(arr[r]);
        r++;
    }
    for(int i=low; i<=high; i++){
        // cout<<arr1[i-low]<<" ";
        arr[i] = arr1[i-low];
    }
    cout<<endl;
}
void mergeSort(int arr[], int low, int high) {
    // Write Your Code Here
    if(low==high) return;
    int mid = (low+high)/2;
    mergeSort(arr, low, mid);
    mergeSort(arr, mid+1, high);
    merge(arr,low,mid,high);
}

Sol-2
// #include<vector>
// using namespace std;

// void merge(vector<int>& arr, int low, int high, int mid){
//     vector<int> temp;
//     int left = low;
//     int right = mid+1;
//     while(left<=mid && right<=high){
//         if(arr[left] <= arr[right]){
//             temp.push_back(arr[left]);
//             left++;           
//         }
//         else{
//             temp.push_back(arr[right]);
//             right++;
//         }
//     }
//     while(left<=mid){
//           temp.push_back(arr[left]);
//             left++;
//     }
//     while(right<=high){
//         temp.push_back(arr[right]);
//             right++;
//     }
//     for(int i=low; i<=high; i++){
//         arr[i]= temp[i-low];
//     }
// }

// void mS(vector<int>& arr[], int low, int high) {
//     // Write Your Code Here
//     if(low==high)return;
//     int mid = (low+high)/2;
//     mS(arr, low, mid);
//     mS(arr, mid+1, high);
//     merge(arr, low, mid, high)
// }
// void mergeSort(vector<int>& arr, int n){
//     mS(arr, 0,n-1);
// }
