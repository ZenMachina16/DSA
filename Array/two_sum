#include <vector>

void merge(vector<int> &book, int l, int m, int h){

    int i=l, j=m+1;

    vector<int> aux;

    while(i<=m && j<=h){

        if(book[i]>=book[j]) aux.push_back(book[j++]);

        else aux.push_back(book[i++]);

    }

    while(i<=m){

        aux.push_back(book[i++]);

    }

 

    while(j<=h){

        aux.push_back(book[j++]);

    }

    for(int k=l; k<=h; k++){

        book[k] = aux[k-l];

    }

}

void sort(vector<int> &book, int l, int h){

    if(l>=h) return;

    int m = (l+h) / 2;

    sort(book, l, m);

    sort(book, m+1, h);

    merge(book, l, m, h);

}

 

string read(int n, vector<int> book, int target){

    sort(book, 0, book.size()-1); //sorted using merge sort Big-Oh(N*log(N))

    // for (int i=0; i<n; i++) cout<<book[i]<<" ";

    int i = 0, j = book.size()-1;

    while(i<j){

        if(book[i] + book[j] == target) return "YES";

        else if (book[i] + book[j] > target) --j;

        else ++i;

    }

 

    return "NO";

    //Final time complexity = Big-Oh(N*log(N) + N) = Big-Oh(N*log(N))C++ 

}
